>>> matrix_divided = __import__('2-matrix_divided').matrix_divided
>>> matrix_divided([[1,2], [3,4]], 3)
[[0.33, 0.67], [1.0, 1.33]]

>>> matrix_divided([[1,2], [3,4,5]], 3)
Traceback (most recent call last):
    raise TypeError('Each row of the matrix must have the same size')
TypeError: Each row of the matrix must have the same size

>>> matrix_divided([[1,2,6,7], [3,4,5]], 3)
Traceback (most recent call last):
    raise TypeError('Each row of the matrix must have the same size')
TypeError: Each row of the matrix must have the same size

>>> matrix_divided([[1,2,6,7], [3,4,5,8]], 3)
[[0.33, 0.67, 2.0, 2.33], [1.0, 1.33, 1.67, 2.67]]

>>> matrix_divided([[1,2,6,7], [3,4,5,8]], True)
Traceback (most recent call last):
    raise TypeError('div must be a number')
TypeError: div must be a number

>>> matrix_divided([[1,2,6,7], [3,4,5,False]], 3)
Traceback (most recent call last):
    raise TypeError('matrix must be a matrix (list of lists) of integers/floats')
TypeError: matrix must be a matrix (list of lists) of integers/floats

>>> matrix_divided([[1,2,[7],7], [3,4,5,6]], 3)
Traceback (most recent call last):
    raise TypeError('matrix must be a matrix (list of lists) of integers/floats')
TypeError: matrix must be a matrix (list of lists) of integers/floats

>>> matrix_divided([[1,2,3], '456'] , 3)
Traceback (most recent call last):
    raise TypeError('matrix must be a matrix (list of lists) of integers/floats')
TypeError: matrix must be a matrix (list of lists) of integers/floats

>>> matrix_divided([] , 3)
Traceback (most recent call last):
    raise TypeError('Each row of the matrix must have the same size')
TypeError: matrix must be a matrix (list of lists) of integers/floats

>>> matrix_divided([[]] , 3)
[[]]
